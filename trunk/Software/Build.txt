Building UWSDR
==============

There is very little configuration to be done, but there are some compiler defines for the UWSDR GUI that may be of interest for testing. These are switched on using compiler flags such as "-Dxxxxx" or "/Dxxxx" depending on the platform. These defines are:

Name          RX Input     RX Output    TX Input    TX Output    SDR Control    Define
--------------------------------------------------------------------------------------
Standard      UDP          Audio Card   Audio Card  UDP          TCP            (none)
Tobias        UDP          Audio Card   Two-Tone    UDP          None           TOBIAS

The Tobias configuration is for testing the back-end hardware for UDP only. It is only enabled when the uwsdr1 type is chosen, all other types e.g. SoftRock are unchanged.


Windows
-------

Everything required to build the software is to be found in the SVN repository, but you will also need Visual C++ 6.0 or Visual C++ Express and wxWidgets 2.8.0 or later. The standard installation of wxWidgets puts it into a folder in the root directory, this folder name is hard coded in the Visual C++ project files. This is easily changed to match your installation.

For building using Visual C++ 6.0 you should use the UWSDR.dsw file and for Visual C++ Express you should use the UWSDR.sln file.

WxWidgets can be found at http://www.wxwidgets.org

PortAudio V19 is now buildable by default from the PortAudio web page http://www.portaudio.com which also requires a copy of the ASIO SDK to build. The default build is fine apart from including the unneeded "Skeleton" which should be commented out. I install the portaudio.h file in a sub-directory of the UWSDR Software root directory named PA19, the Debug and Release .lib files are in the sub-directories PA19/Debug and PA19/Release respectively.

The version of FFTW3 was obtained from the Power SDR distribution and cannot be built using Visual C++. I put the FFTW3 .lib and .h files into a sub-directory named FFTW3 from the UWSDR Software root directory.

Once built, if you want to build a proper installable version of the software, you should install the Nullsoft installation software, to be found at http://nsis.sourceforge.net/Main_Page

The configuration file for NSIS is to be found in the meta directory. You will probably have to edit the UWSDR.nsi file to refelect the paths of your executables. Run NSIS against the UWSDR.nsi file and all being well you'll have a proper Windows install executable. For the proper creation of the installable exe, I have all of the required binary files, that is .exe and .dll in a sub-directory of the Software root directory named Release. This directory will be created automatically by the Visual C++ build process.

The Help files are not built by default, these have to be done manually. Go to the Help sub-directory and then go into each of the GUISetup, SDRSetip and UWSDR sub-directories and simply zip up all of the files in those directories, but do not include any path information. On Windows XP and later you can do this by selecting the required files and then clicking the right hand mouse button and selecting "Send To" and then "Compressed (zipped) Folder", you'll probably have to rename the resulting zip files, the same name as the diretory plus .zip.


Linux
-----

The build platform used is Ubuntu 6.10, although the comments apply equally well to Ubuntu 6.06. Generally the comments below will apply to most other Linux distributions, particularly Debian which Ubuntu is based on. By default Ubuntu does not come with any compilers installed, and so you'll need to install g++ and make.

Before building the software you need to ensure that you have the pre-requisites installed, either as packages or built from source. Note that in all cases I installed the libraries in /usr/lib rather than the default /usr/local/lib. To do this add the "--prefix=/usr" to the configure command line, however this is not shown in the examples below.

wxWidgets 2.8.0 or later should be built and installed. This can be found at http://www.wxwidgets.org and will take some time to build. If you install it as a package then ensure that the devel part is installed as well. In order to do this you'll need to install the libgtk2.0-dev package.

The FFTW3 library must be installed, both the libraries and the header files. These are available as the packages fftw3 and fftw3-dev within the Synaptic package Manager.

Finally you will need PortAudio V19. This is still in beta, and has been for years, and can be found at http://www.portaudio.com and download the latest stable release of the V19 branch, which is currently pa_stable_v19_061121.tar.gz which can be found at http://www.portaudio.com/archives/pa_stable_v19_061121.tar.gz. Build this and install it as per its instrucions. Note that you will have to load the libasound2 development package otherwise portaudio will only use OSS otherwise. The latest v19-devel branch has problems with OSS under Linux. Note that you should stop all sound daemons before using the UWSDR GUI as they don't interact nicely when using ALSA, they can be switched off from the Ubuntu menu from System -> Preferences -> Sound.

Once all of these packages are installed, you can build the UWSDR software. From the command line type:

$ make -f Makefile.linux

Which should build all of the programs without errors, there will be a few warnings, but only a few.

If using Ubuntu it can then be installed with the command:

$ sudo make -f Makefile.linux install

And on most other Linux versions by logging in as root and typing:

# make -f Makefile.linux install

Which will put the executables in /usr/bin and the other files into /usr/share/uwsdr. These locations can be changed from the top level Makefile. If you do change these, you will also have to change the .desktop files in the meta directory as these also contain paths to the executables.

If none of the programs within the UWSDR package run and complain about being unable to find the wxGTK library then you probably have a problem with the configuration of the library path. Thankfully the solution is simple. You need to log in as the super user and edit a configuration file, On Ubuntu/Debian and SuSE it's /etc/ld.so.conf and on Fedora Core it's /etc/ld.so.conf.d/mypath.conf. In those files you should add the path to your new libraries which will probably be /usr/local/lib unless you override this when configuring the packages as explained at the beginning.


Mac OS X
--------

Building UWSDR on Mac OS X is very similar to doing so under Linux. In each case read the documentation for each to find out any specific Mac OS X information.

Building the basic UWSDR is the same as for Linux except that instead of using Makefile.linux, use Makefile.macosx instead.

The Mac OS X version is still not as complete as the other versions, in particular the Control Port choices are incorrect and should be switched off. This means that currently it cannot be used with a SoftRock RXTX. This should be remedied in a future release. Likewise the creation of menu and desktop entries is not supported either.
